{"name":"MIG: Mozilla InvestiGator","tagline":"OpSec's platform for investigative surgery of remote endpoints.","body":"MIG: Mozilla InvestiGator\r\n=========================\r\n\r\nMIG is OpSec's platform for investigative surgery of remote endpoints. It's a\r\nplatform that allows investigators to send actions to pools of agents, and check\r\nfor indicator of compromision, verify the state of a configuration, block an\r\naccount, create a firewall rule or update a blacklist.\r\n\r\n![MIG logo](http://4u.1nw.eu/mig-logo-transparent.png)\r\n\r\nFor example: an investigator launches an action to search for an apache module\r\nthat matches a given md5 value. MIG will register the action, find all the\r\nrelevant targets and send commands to each target with the detail of the\r\naction. Each agent then individually run the action using built-in modules\r\nlocally, and sends the results back to the MIG platform.\r\n\r\nAgents are designed to be lightweight, secure, and easy to deploy. All\r\nparameters are built into the agent at compile time, include the list of\r\ninvestigator's public keys. The agent binary is statically compiled for a target\r\nplatform and can be shipped without any external dependency.\r\n\r\nMIG is designed to be fast, and asynchronous. It uses AMQP to distribute actions\r\nto endpoints, and relies on Go channels to prevent components from blocking.\r\nRunning actions and commands are stored on disk cache, and don't rely on running\r\nprocesses for reliability.\r\n\r\nSpeed is a strong requirement. Most actions will only take a few hundreds\r\nmilliseconds to run. Larger ones, for example when looking for a hash in a large\r\ndirectory, should run in less than a minute.\r\n\r\nCheck out this 6 minutes presentation for background:\r\n\r\n[![MIG youtube video](http://img.youtube.com/vi/uwrJ6Mtc4S0/0.jpg)](http://www.youtube.com/watch?v=uwrJ6Mtc4S0)\r\n\r\nGoals\r\n-----\r\n\r\n* Query a pool of endpoints to verify the presence of a specific indicators\r\n  (similar to IOC, but we use a different format)\r\n* Provide response mechanisms to lock down compromised endpoints\r\n* Periodically verify endpoint's compliance with the Security Policies\r\n\r\nFeatures\r\n--------\r\n* Provide strong authentication of investigators\r\n    * Actions must have a valid GPG signature, each investigator has a different\r\n      key, for tracking.\r\n* Provide a way to inspect remote systems for indicators of compromise (IOC).\r\n  At the moment, this is limited to :\r\n    * file by name\r\n    * file content by regex\r\n    * file hashes: md5, sha1, sha256, sha384, sha512, sha3_224,sha3_256,\r\n      sha3_384, sha3_512\r\n* Protect data security, investigate without intruding:\r\n    * Raw data must not be readily available to investigators\r\n\r\nTodo list:\r\n* More agent modules\r\n    * low level devices (memory, file system blocks, network cards)\r\n    * established connections\r\n    * firewall rules\r\n    * lots more ...\r\n* Provide response mechanisms, including:\r\n    * dynamic firewall rules additions & removal\r\n    * system password changes\r\n    * process execution (execve) & destruction (kill)\r\n* Input/Output IOCs, Yara, ... through the API\r\n* Output results in standard format for alerting\r\n\r\nDocumentation\r\n-------------\r\nAll documentation is available in the 'doc' directory.\r\n\r\nBug & Issue tracker\r\n-------------------\r\nWe use Bugzilla to track the work on MIG.\r\n* List open bugs: [Bugzilla MIG](https://bugzilla.mozilla.org/showdependencytree.cgi?id=896480&hide_resolved=1)\r\n* Create a new bug: [Bugzilla OpSec](https://bugzilla.mozilla.org/enter_bug.cgi?product=mozilla.org&component=Security%20Assurance%3A%20Operations)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}