========
MIG Data
========

MIG data is stored both on the file system of the scheduler, and in mongodb. On
the scheduler, each action and command are stored individually in a text file in
/var/cache/mig (by default).

.. code:: bash

	$ tree -d /var/cache/mig/
	/var/cache/mig/
	├── action
	│   ├── done
	│   ├── inflight
	│   ├── invalid
	│   └── new
	└── command
		├── done
		├── inflight
		├── ready
		└── returned

	10 directories

MongoDB
-------

Data is also stored in MongoDB. Actions and Commands have their own separate
collections. MongoDB is also used to store agent's keepalives.


**Use the Mongo Shell**

On the mongo database, enter the mongodb shell as follow:

.. code:: javascript

	$ mongo
	MongoDB shell version: 2.4.9
	connecting to: test

	> use mig;
	switched to db mig

	> show collections;
	actions
	commands
	registrations
	system.indexes

**Retrieve an action or command**

Actions and commands can be queried by their ID.

.. code:: javascript

	> db.actions.find({ 'action.id': 5978800913477866376 }).pretty();

	> db.commands.find({ 'id': 5978800912567560121 }).pretty()

**Retrieve the list of agents that have positive results**

The query below retrieves a list of agents that have executed a specific action,
identified by its ID, and have found something.
See the **concepts** documentation for details on the action and command fields.

.. code:: javascript

	> var actionFoundSomething = db.commands.find(
	... {
	... 'action.id': 5978800913477866376,
	... 'results.0.FoundAnything': true
	... }
	... );

The results are stored in a variable called 'actionFoundSomething', that is
created inside the mongo shell. We can iterate through the results of the query,
and print the list of agents, using a second shell command:

.. code:: javascript

	> actionFoundSomething.forEach(
	... function(currentcommand){
	... ... print(currentcommand.agentname);
	... }
	... );

To print the result of the commands ran on the agent, we need to know the
parameters of the action that was sent. In this case, the 'filechecker' module
was called, so by knowing the structure of the results generated by filechecker,
we can write a better query.

This is the original action that was sent:

.. code:: json

	{
		"Name": "Verify root password storage method",
		.....
		"Operations": [
			{
				"Module": "filechecker",
				"Parameters": {
					"/etc/shadow": {
						"regex": {
							"root password hashed with md5": [
								"root:\\$1\\$"
							]
						}
					}
				}
			}
		]
	}

Below is the Results section sent back by one agent:

.. code:: json

	{
		"Action": { ... },
		"AgentName": "...",
		"AgentQueueLoc": "...",
		"Results": [
			{
				"Elements": {
					"/etc/shadow": {
						"regex": {
							"root password hashed with md5": {
								"root:\\$1\\$": {
									"Filecount": 1,
									"Files": {
										"/etc/shadow": 1
									},
									"Matchcount": 1
								}
							}
						}
					}
				},
				"Extra": { ... },
				"FoundAnything": true
			}
		],
		"StartTime": "2014-02-10T16:01:04.50870976Z",
		"Status": "succeeded"
	}

With this information, we can write the following queries:

.. code:: javascript

	> var actionFoundSomething = db.commands.find({'action.id': 5978800913477866376,'results.0.FoundAnything': true});

	> actionFoundSomething.forEach(
		function(currentcommand){
			currentcommand.results.forEach(
				function(printresult) {
					var files = printresult["Elements"]["/etc/shadow"]["regex"]["root password hashed with md5"]["root:\\$1\\$"]["Files"];
					for(file in files) {
						print(files[file], "match in", file, "on", currentcommand.agentname);
					}
				}
			);
		}
	);

	1 match in /etc/shadow on mytestserver1.example.net
	1 match in /etc/shadow on mytestserver2.example.net
	1 match in /etc/shadow on .....

**Extracting results from Filechecker in MongoDB**

The result syntax of each module is different. Filechecker, for example, use a
heavily nested object that represents a path with a method, a test ID, a test
value, a list of files and a match counter on each file. This can be cumbersome
to parse, so the generic mongodb query below will do it for you:

.. code:: javascript

	> var actionFoundSomething = db.commands.find({'action.id': 5978800913477866376,'results.0.FoundAnything': true});

	> actionFoundSomething.forEach(
		function(currentcommand){
			currentcommand.results.forEach(
				function(results) {
					for (path in results["Elements"]) {
						for (method in results["Elements"][path]) {
							for (testid in results["Elements"][path][method]) {
								for (test in results["Elements"][path][method][testid]) {
									if ( results["Elements"][path][method][testid][test]["Matchcount"] > 0 ) {
										for (file in results["Elements"][path][method][testid][test]["Files"]) {
											print(testid + ":", method, "'" + test + "'", "matched", results["Elements"][path][method][testid][test]["Files"][file], "times in '" + file + "'", "on agent", currentcommand.agentname);
										}
									}
								}
							}
						}
					}
				}
			);
		}
	);

	root password strongly hashed and salted: regex 'root:\$(2a|5|6)\$' matched 1 times in '/etc/shadow' on agent fedbox
	root password strongly hashed and salted: regex 'root:\$(2a|5|6)\$' matched 1 times in '/etc/shadow' on agent jaffatower
	...

	{            test identifier           }  {mode} {   test value  }       {counter}     {   file   }           {agent name}


See MongoDB reference documentation for a full explanation of the query language.
